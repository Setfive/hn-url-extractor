{"version":3,"file":"lib.js","sourceRoot":"","sources":["../src/lib.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as chalk from 'chalk';\nimport * as cheerio from 'cheerio';\nimport axios from 'axios';\nconst stringify = require('csv-stringify/lib/sync');\n\nimport {IExtractedSite, IKeywordAndDescription, ILaunchArguments} from './models';\n\nexport class Lib {\n\n    private static extractedSiteMap = new Map<string, IExtractedSite>();\n\n    public static getCliArguments(): ILaunchArguments {\n        const launchArguments = require('yargs').argv;\n        return Object.assign({url: null, outFile: 'results.csv', format: 'csv', urlsFile: null}, launchArguments);\n    }\n\n    public static async process(params: ILaunchArguments): Promise<void> {\n        return new Promise<void>(async (resolve, reject) => {\n            let urls: string[] = [];\n            if(params.url) {\n                urls.push(params.url);\n            }else if(params.urlsFile){\n                const fileData = fs.readFileSync(params.urlsFile, 'utf8');\n                if(fileData) {\n                    urls = fileData.trim().split(/[\\r\\n]+/);\n                }\n            }\n\n            if(urls.length === 0) {\n                Lib.error('No URLs found? Something probably isn\\'t right.');\n                resolve();\n                return;\n            }\n\n            Lib.log(`Found ${urls.length} URLs to process. Here we go...`);\n\n            const results: IExtractedSite[] = [];\n            for(const u of urls) {\n                try {\n                    const html = await Lib.fetchURL(u);\n                    const extractedSites = Lib.extractSitesFromHTML(html);\n\n                    const numSites = extractedSites.length;\n                    let processed = 0;\n                    Lib.log(`Found ${numSites} in comments to process.`);\n                    for(const site of extractedSites) {\n                        processed += 1;\n                        const percent = Math.ceil((processed / numSites) * 100);\n                        Lib.log(`Fetching (${percent}%): ${site.url}`);\n                        const kw = await Lib.fetchMetaDescription(site.url);\n                        results.push(Object.assign(site, kw));\n                    }\n                }catch(e){\n\n                }\n            }\n\n            results.sort((a, b) => a.url.localeCompare(b.url))\n            Lib.createOutputFile(params, results);\n        });\n    }\n\n    public static async fetchURL(url: string): Promise<string> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const response = await axios.get(url);\n                resolve(response.data);\n            }catch(e) {\n                Lib.error(e);\n                reject(e);\n            }\n        });\n    }\n\n    public static extractSitesFromHTML(html: string): IExtractedSite[] {\n        const $ = cheerio.load(html);\n        const commentSites: IExtractedSite[] = [];\n\n        $('.comment').each((i, el) => {\n\n            let link = '';\n\n            try {\n                const td = $(el).parents('td');\n                const itemPart = td.length ? $(td[0]).find('.age a').attr('href') : '';\n                link = 'https://news.ycombinator.com/' + itemPart;\n            }catch(e) {\n                Lib.error(e);\n            }\n\n            const commentHTML = $(el).html() ?? '';\n            const hnCommentText = $(el).text() ? $(el).text().trim() : '';\n            const re = new RegExp(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi);\n            const emails: string[] = commentHTML.match(re) ?? [];\n\n            const baseUrls = new Set<string>();\n            $(el).find('a').each((ix, ex) => {\n                const u = $(ex).attr('href');\n                if (!u || (u.indexOf('http') === -1 && u.indexOf('https') === -1)) {\n                    return true;\n                }\n\n                const url = new URL(u);\n                baseUrls.add(url.origin);\n            });\n\n            for(const u of baseUrls) {\n                commentSites.push({url: u, emails: emails, hnLink: link, hnCommentText: hnCommentText, description: '', keywords: ''});\n            }\n        });\n\n        return commentSites;\n    }\n\n    public static async fetchMetaDescription(url: string): Promise<IKeywordAndDescription> {\n        return new Promise(async (resolve, reject) => {\n            try {\n\n                const response = await axios.get(url);\n                const $ = cheerio.load(response.data);\n\n                let description = '';\n                let keywords = '';\n                if($('meta[name=\\'description\\']').length) {\n                    description = $($('meta[name=\\'description\\']')[0]).attr('content') ?? '';\n                }\n\n                if($('meta[name=\\'keywords\\']').length) {\n                    keywords = $($('meta[name=\\'keywords\\']')[0]).attr('content') ?? '';\n                }\n\n                resolve({keywords: keywords, description: description});\n            }catch(e) {\n                resolve({keywords: '', description: ''});\n            }\n        });\n    }\n\n    public static createOutputFile(config: ILaunchArguments, results: IExtractedSite[]) {\n        let data = '';\n        if(config.format === 'csv') {\n            const header = [['url', 'HN link', 'emails', 'HN comment', 'description', 'keywords']];\n            const csvData = header\n                            .concat(results.map(f => [f.url, f.hnLink, f.emails.join('|'), f.hnCommentText, f.description, f.keywords]));\n            data = stringify(csvData);\n        }else if(config.format === 'json') {\n            data = JSON.stringify(results);\n        }\n\n        fs.writeFileSync(config.outFile, data);\n\n        Lib.log('Wrote results to ' + config.outFile);\n    }\n\n    public static log(msg: string) {\n        // tslint:disable-next-line:no-console\n        console.log(msg);\n    }\n\n    public static error(msg: string) {\n        // tslint:disable-next-line:no-console\n        console.log(chalk.bgRed.white(msg));\n    }\n}"]}